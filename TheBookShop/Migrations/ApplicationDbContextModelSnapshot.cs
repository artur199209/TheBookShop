// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBookShop.Models;

namespace TheBookShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheBookShop.Models.DataModels.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Notes")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.CartLine", b =>
                {
                    b.Property<int>("CartLineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId");

                    b.Property<int?>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("CartLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerAddressId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerAddressId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerAddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("HomeNumber");

                    b.Property<string>("ZipCode");

                    b.HasKey("CustomerAddressId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.DeliveryAddress", b =>
                {
                    b.Property<int>("DeliveryAddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("HomeNumber");

                    b.Property<string>("ZipCode");

                    b.HasKey("DeliveryAddressId");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("DeliveryMethodId");

                    b.ToTable("DeliveryMethod");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Opinion", b =>
                {
                    b.Property<int>("OpinionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("OpinionDate");

                    b.Property<string>("OpinionDescription");

                    b.Property<int?>("ProductId");

                    b.HasKey("OpinionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<int?>("DeliveryAddressId");

                    b.Property<int?>("DeliveryMethodId");

                    b.Property<bool>("GiftWrap");

                    b.Property<int?>("PaymentId");

                    b.Property<int?>("PaymentMethodId");

                    b.Property<bool>("Shipped");

                    b.Property<string>("TrackingNumber");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("PaymentDate");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeliveryMethodId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("DeliveryMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("TheBookShop.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId");

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Cover")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<int>("NumberOfPages");

                    b.Property<decimal>("Price");

                    b.Property<string>("PublishingHouse")
                        .IsRequired();

                    b.Property<int>("QuantityInStock");

                    b.Property<string>("Subcategory")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ProductId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.CartLine", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.Order")
                        .WithMany("Lines")
                        .HasForeignKey("OrderId");

                    b.HasOne("TheBookShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Customer", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.CustomerAddress", "CustomerAddress")
                        .WithMany()
                        .HasForeignKey("CustomerAddressId");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Opinion", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TheBookShop.Models.Product", "Product")
                        .WithMany("Opinions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Order", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TheBookShop.Models.DataModels.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("TheBookShop.Models.DataModels.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("TheBookShop.Models.DataModels.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("TheBookShop.Models.DataModels.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.Payment", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TheBookShop.Models.DataModels.PaymentMethod", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.DeliveryMethod", "DeliveryMethod")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("DeliveryMethodId");
                });

            modelBuilder.Entity("TheBookShop.Models.Product", b =>
                {
                    b.HasOne("TheBookShop.Models.DataModels.Author", "Author")
                        .WithMany("Products")
                        .HasForeignKey("AuthorId");
                });
#pragma warning restore 612, 618
        }
    }
}
